Private Const Job_ID_Column = 8
Private Const Site_ID_Column = 14
Private Const Master_Sheet = "MASTER"
Private Const Master_Sheet_Range = "MASTER"
Private Const Header_Offset = 1
Private Const Job_ID_Prefix = "AWCSJ18"
    
Private Sub Worksheet_Change(ByVal Target As Range)

    'Only if the cell that changed was in the Site IDs column
    If Target.Column = Site_ID_Column Then
    
        'Only if there isn't a job id already
        If Cells((Target.Row), Job_ID_Column) = vbNullString Then
        
            'Get all the values in the cells in the IDs column
            Dim jobIds As Variant
            jobIds = Worksheets(Master_Sheet).Range(Master_Sheet_Range).Offset(Header_Offset, 0).Columns(Job_ID_Column).Value
            
            'Another way, make ids a 1D Array instead of a 2D array
            'jobIds = Application.Transpose(Worksheets(Master_Sheet).Range(Master_Sheet_Range).Offset(Header_Offset, 0).Columns(Job_ID_Column).Value)
            
            'Variable to hold the maximum values found
            Dim maxJobIdNumber As Integer
            maxJobIdNumber = 0 'Default value to make greater than work on first loop iteration
            
            'Go through the IDs, one by one (for loop, this code runs for each position in the job ids array)
            For i = LBound(jobIds) To UBound(jobIds)
            
                'Get the value out of the 2D array
                Dim cellValue As String
                cellValue = jobIds(i, 1) 'Position in each dimension of the array, 2nd dimension is always 1 as jobIds is a single column
                
                'Useful to inspect values, use View -> Immediate Window to see the printed values, uncomment to use
                'Debug.Print cellValue
            
                'Check that there are no empty values in the Job Id cell, the rest of the code breaks if there is no value in the cell
                If cellValue <> vbNullString Then
        
                    'Get the number part of the job ID (strip the prefix and then convert it to a number)
                    Dim jobIdNumber As Integer
                    jobIdNumber = CLng(Mid(cellValue, Len(Job_ID_Prefix) + 1))
        
                    'Update the maximum found if this value is greater than the maximum seen so far
                    If jobIdNumber > maxJobIdNumber Then
                        maxJobIdNumber = jobIdNumber
                    End If
                    
                End If
            Next
            
            'Place the next job Id in the job id column of the row that was changed
            'Next job Id is the maximum job id number seen plus 1, padded with the appropiate number of 0s to make it 4 digits and prefixed
            Cells((Target.Row), Job_ID_Column) = Job_ID_Prefix & Format$(maxJobIdNumber + 1, "0000")
        
        End If
    End If
End Sub






Private Const Job_ID_Column = 8
Private Const Site_ID_Column = 14
Private Const Header_Offset = 1
Dim vOldVal

Private Sub Worksheet_Change(ByVal Target As Range)

'Only if change was in a specific column
If Target.Column = 19 Then 'this needs to be multiple columns e.g. 12 or 14 or 18 etc


If Target.Cells.Count > 1 Then Exit Sub

On Error Resume Next



    With Application

         .ScreenUpdating = False

         .EnableEvents = False

    End With



    If IsEmpty(vOldVal) Then vOldVal = "Empty Cell"

        With Sheet1 'ChangeLog sheet number

            '.Unprotect Password:="Secret" 'Protection and password (optional) not using for testing but will use in live

                If .Range("A1") = vbNullString Then

                    .Range("A1:H1") = Array("JOB ID", "COLUMN HEADER", "PREMISE CODE / SITE ID", "OLD VALUE", _
                        "NEW VALUE", "USER", "TIME OF CHANGE", "DATE OF CHANGE")

                End If





            With .Cells(.Rows.Count, 1).End(xlUp)(2, 1)

                  .Value = Cells((Target.Row), Job_ID_Column) 'Job ID
                  
                  .Offset(0, 1) = Cells(Header_Offset, (Target.Column)) 'Column Header
                  
                  .Offset(0, 2) = Cells((Target.Row), Site_ID_Column)  'Site ID

                  .Offset(0, 3) = vOldVal 'Old Value

                  .Offset(0, 4) = Target.Value 'New Value with preserved number format (can't cope with hh:mm format??)

                  .Offset(0, 5) = UCase(Environ("USERNAME")) 'Username in uppercase
 
                  .Offset(0, 6) = Time 'Time
 
                  .Offset(0, 7) = Date 'Date

            End With

            .Cells.Columns.AutoFit

            '.Protect Password:="Secret" 'Protection and password (optional) not using for testing but will use in live

        End With

    vOldVal = vbNullString



    With Application

         .ScreenUpdating = True

         .EnableEvents = True

    End With



On Error GoTo 0

End If

End Sub



Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    vOldVal = Target

End Sub

